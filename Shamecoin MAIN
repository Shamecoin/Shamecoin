# Install Solana CLI
sh -c "$(curl -sSfL https://release.solana.com/v1.14.16/install)"

# Install Anchor
npm install -g @coral-xyz/anchor-cli
# Create the token
spl-token create-token

# Mint some supply
spl-token create-account <TOKEN_MINT_ADDRESS>
spl-token mint <TOKEN_MINT_ADDRESS> 1000000000 <RECIPIENT_ACCOUNT>
use anchor_lang::prelude::*;

declare_id!("YOUR_PROGRAM_ID");

#[program]
pub mod shamecoin_program {
    use super::*;

    pub fn create_post(
        ctx: Context<CreatePost>,
        title: String,
        description: String,
    ) -> Result<()> {
        let post = &mut ctx.accounts.shame_post;
        post.author = *ctx.accounts.author.key;
        post.title = title;
        post.description = description;
        post.upvotes = 0;
        post.status = 0; // ACTIVE
        Ok(())
    }

    pub fn vote_post(
        ctx: Context<VotePost>,
    ) -> Result<()> {
        let post = &mut ctx.accounts.shame_post;
        post.upvotes += 1;
        Ok(())
    }
}

// ------------------ Contexts ------------------

#[derive(Accounts)]
#[instruction()]
pub struct CreatePost<'info> {
    #[account(init, payer = author, space = 8 + 256 + 1024)]
    pub shame_post: Account<'info, ShamePost>,
    #[account(mut)]
    pub author: Signer<'info>,
    pub system_program: Program<'info, System>,
}

#[derive(Accounts)]
pub struct VotePost<'info> {
    #[account(mut)]
    pub shame_post: Account<'info, ShamePost>,
    // The voter signs but doesn't need to store anything in this MVP
    pub voter: Signer<'info>,
}

#[account]
pub struct ShamePost {
    pub author: Pubkey,
    pub title: String,
    pub description: String,
    pub upvotes: u64,
    pub status: u8, // 0=ACTIVE, 1=WINNER_PENDING_PROOF, etc.
}
if (yes_votes > no_votes) {
  transfer_tokens_from_pool_to_winner(winner_account);
} else {
  // Rollover logic
  rollover_tokens_to_next_round_pool(amount);
}
